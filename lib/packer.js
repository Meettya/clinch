// Generated by CoffeeScript 1.7.1

/*
This class pack all together with layout

Тут у нас и происходит встройка данных с 
путями и кодом файлов в шаблон, эмулирующий require и export
 */

(function() {
  var PACKAGE_FILENAME, Packer, RUNTIME_FILENAME, RUNTIME_TARGET_VERSION, async, fs, path, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  async = require('async');

  fs = require('fs');

  path = require('path');

  PACKAGE_FILENAME = path.join(__dirname, '..', 'package.json');

  RUNTIME_FILENAME = path.join(__dirname, '..', 'clinch_runtime.js');

  RUNTIME_TARGET_VERSION = 2;

  module.exports = Packer = (function() {
    function Packer(_bundle_processor_, _options_) {
      var _ref, _ref1, _ref2, _ref3;
      this._bundle_processor_ = _bundle_processor_;
      this._options_ = _options_ != null ? _options_ : {};
      this._do_logging_ = (this._options_.log != null) && this._options_.log === true && ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) ? true : false;
      this._settings_ = {
        strict: (_ref = this._options_.strict) != null ? _ref : true,
        inject: (_ref1 = this._options_.inject) != null ? _ref1 : true,
        runtime: (_ref2 = this._options_.runtime) != null ? _ref2 : false,
        cache_modules: (_ref3 = this._options_.cache_modules) != null ? _ref3 : true
      };
      this._clinch_verison_ = null;
      this._clinch_runtime_file_content_ = null;
    }


    /*
    This method create browser package with given configuration
     */

    Packer.prototype.buildPackage = function(package_config, main_cb) {
      var builder_fn;
      builder_fn = (function(_this) {
        return function(main_cb) {
          return _this._bundle_processor_.buildAll(package_config, function(err, package_code) {
            if (err) {
              return main_cb(err);
            }
            return main_cb(null, _this._assemblePackage(package_code, package_config));
          });
        };
      })(this);
      if (!(this._clinch_verison_ && this._clinch_runtime_file_content_)) {
        return this._readSupportFiles((function(_this) {
          return function(err, files_data) {
            if (err) {
              return main_cb(err);
            }
            _this._clinch_verison_ = files_data[0], _this._clinch_runtime_file_content_ = files_data[1];
            return builder_fn(main_cb);
          };
        })(this));
      } else {
        return builder_fn(main_cb);
      }
    };


    /*
    This methos read support files in async manner
     */

    Packer.prototype._readSupportFiles = function(main_cb) {
      return async.parallel({
        version: function(acb) {
          return fs.readFile(PACKAGE_FILENAME, 'utf8', function(err, data) {
            var error, json_data;
            if (err != null) {
              return acb(err);
            }
            try {
              json_data = JSON.parse(data);
            } catch (_error) {
              error = _error;
              return acb(error);
            }
            if (json_data != null) {
              return acb(null, json_data.version);
            } else {
              return acb("no data in |" + PACKAGE_FILENAME + "| finded");
            }
          });
        },
        content: function(acb) {
          return fs.readFile(RUNTIME_FILENAME, 'utf8', acb);
        }
      }, function(err, results) {
        if (err != null) {
          return main_cb(err);
        }
        return main_cb(null, [results.version, results.content]);
      });
    };


    /*
    This method assemble result .js file from bundleset
     */

    Packer.prototype._assemblePackage = function(package_code, package_config) {
      var env_body, env_header, result, _ref;
      _ref = this._buildEnvironment(package_code.environment_list, package_code.members), env_header = _ref[0], env_body = _ref[1];
      result = this._getHeader(env_header, package_config.strict, package_config.cache_modules);
      result += this._getDependencies(package_code.dependencies_tree);
      result += this._getSource(package_code.source_code);
      result += this._getBoilerplateJS(package_config.runtime);
      result += this._requireResolver(package_config.cache_modules, package_config.runtime);
      result += "\n" + env_body;
      result += this._getExportDef(package_config, package_code);
      return result + "\n" + this._getFooter();
    };


    /*
    This method build "environment" - local for package variables
    They immitate node.js internal gobal things (like process.nextTick, f.e.)
     */

    Packer.prototype._buildEnvironment = function(names, paths) {
      var body, header;
      if (!names.length) {
        return ['', ''];
      }
      header = "/* this is environment vars */\nvar " + names.join(', ') + ';';
      body = _.reduce(names, function(memo, val) {
        return memo += "" + val + " = require(\"" + paths[val] + "\");\n";
      }, '');
      return [header, body];
    };


    /*
    This method create full clinch header
     */

    Packer.prototype._getHeader = function(env_header, strict_settings, cache_modules_settings) {
      return "\n// Generated by clinch " + this._clinch_verison_ + "\n(function() {\n  " + (this._getStrictLine(strict_settings)) + "\n  " + env_header + "\n  " + (this._getVariableDefinitions(cache_modules_settings));
    };


    /*
    This method create dependencies part
     */

    Packer.prototype._getDependencies = function(dependencies_tree) {
      return "\n  dependencies = " + (JSON.stringify(dependencies_tree)) + ";\n";
    };


    /*
    This method gather all sources
     */

    Packer.prototype._getSource = function(source_obj) {
      var code, name, result, source_index;
      result = "\n  sources = {\n";
      source_index = 0;
      for (name in source_obj) {
        if (!__hasProp.call(source_obj, name)) continue;
        code = source_obj[name];
        result += source_index++ === 0 ? "" : ",\n";
        result += JSON.stringify(name);
        result += ": function(exports, module, require) {" + code + "\n}";
      }
      return result += "};\n";
    };


    /*
    This method create export definition part
     */

    Packer.prototype._getExportDef = function(_arg, package_code) {
      var inject, package_name, prefix;
      package_name = _arg.package_name, inject = _arg.inject;
      if (inject == null) {
        inject = this._settings_.inject;
      }
      prefix = this._getMemberPrefix(inject);
      return "\n/* bundle export */\n" + (package_name != null ? "" + prefix + package_name + " = {\n  " + (this._showBundleMembers(package_code, '', ':')) + "\n};" : this._showBundleMembers(package_code, prefix, '='));
    };


    /*
    This method will show all bundle members for exports part
     */

    Packer.prototype._showBundleMembers = function(_arg, member_prefix, delimiter) {
      var bundle_list, bundle_name, members;
      bundle_list = _arg.bundle_list, members = _arg.members;
      members = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = bundle_list.length; _i < _len; _i++) {
          bundle_name = bundle_list[_i];
          _results.push("" + member_prefix + bundle_name + " " + delimiter + " require(\"" + members[bundle_name] + "\")");
        }
        return _results;
      })();
      return members.join(",\n");
    };


    /*
    This method return  `use 'strict';` line or empty is strict mode supressed
     */

    Packer.prototype._getStrictLine = function(isStrict) {
      if (isStrict == null) {
        isStrict = this._settings_.strict;
      }
      if (isStrict) {
        return "'use strict';";
      } else {
        return '';
      }
    };


    /*
    This method return variables definition string
     */

    Packer.prototype._getVariableDefinitions = function(isCached) {
      if (isCached == null) {
        isCached = this._settings_.cache_modules;
      }
      return "var dependencies, sources, require" + (isCached ? ", modules_cache = {}" : '') + ";";
    };


    /*
    This method return bundle prefix, will used to supress bundle injection
     */

    Packer.prototype._getMemberPrefix = function(isInject) {
      if (isInject) {
        return 'this.';
      } else {
        return 'var ';
      }
    };


    /*
    This is clinch runtime
     */

    Packer.prototype._getBoilerplateJS = function(isRuntimed) {
      if (isRuntimed == null) {
        isRuntimed = this._settings_.runtime;
      }
      if (isRuntimed) {
        return "\nif(this.clinch_runtime_v" + RUNTIME_TARGET_VERSION + " == null) {\n  throw Error(\"Resolve clinch runtime library version |" + RUNTIME_TARGET_VERSION + "| first!\");\n}\n";
      } else {
        return "\nvar " + this._clinch_runtime_file_content_ + "\n";
      }
    };


    /*
    This is short version, MUST be used with runtime js lib
     */

    Packer.prototype._requireResolver = function(isCached, isRuntimed) {
      var modules_cache_string, prefix;
      if (isCached == null) {
        isCached = this._settings_.cache_modules;
      }
      if (isRuntimed == null) {
        isRuntimed = this._settings_.runtime;
      }
      prefix = isRuntimed ? 'this.' : '';
      modules_cache_string = isCached ? ', modules_cache' : '';
      return "\nrequire = " + prefix + "clinch_runtime_v" + RUNTIME_TARGET_VERSION + ".require_builder.call(this, dependencies, sources" + modules_cache_string + ");";
    };


    /*
    This is footer of code wrapper
     */

    Packer.prototype._getFooter = function() {
      return "}).call(this);";
    };

    return Packer;

  })();

}).call(this);
