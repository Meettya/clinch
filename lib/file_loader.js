// Generated by CoffeeScript 1.7.1

/*
This method will load file, cache result and so on
 */

(function() {
  var FileLoader, LRU, async, fs, path, rejectOnInvalidFilenameType, _;

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  async = require('async');

  LRU = require('lru-cache');

  rejectOnInvalidFilenameType = require('./checkers').rejectOnInvalidFilenameType;

  FileLoader = (function() {
    var MAX_AGE;

    MAX_AGE = 1000 * 60 * 60 * 10;

    function FileLoader(_digest_calculator_, _options_) {
      this._digest_calculator_ = _digest_calculator_;
      this._options_ = _options_ != null ? _options_ : {};
      this._file_cache_ = LRU({
        max: 1000,
        maxAge: MAX_AGE
      });
      this._file_in_process_ = {};
    }


    /*
    This method reset all caches
     */

    FileLoader.prototype.resetCaches = function() {
      this._file_cache_.reset();
      this._file_in_process_ = {};
      return null;
    };


    /*
    This method try to get file content from hash or give up and read it from disk
     */

    FileLoader.prototype.getFileContent = rejectOnInvalidFilenameType(function(filename, cb) {
      return this.getFileWithMeta(filename, function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb(null, data.content);
      });
    });


    /*
    This method, get all - content and meta for filename
     */

    FileLoader.prototype.getFileWithMeta = rejectOnInvalidFilenameType(function(filename, cb) {
      var cached_file, lazy_fn;
      if (!this._file_cache_.has(filename)) {
        if (this._file_in_process_[filename]) {
          lazy_fn = (function(_this) {
            return function() {
              return _this.getFileWithMeta(filename, cb);
            };
          })(this);
          return setTimeout(lazy_fn, 0);
        } else {
          this._file_in_process_[filename] = true;
          return this._loadAllFileData(filename, (function(_this) {
            return function(err, data) {
              _this._file_in_process_[filename] = false;
              if (err) {
                return cb(err);
              }
              _this._file_cache_.set(filename, data);
              return cb(null, data);
            };
          })(this));
        }
      } else {
        cached_file = this._file_cache_.get(filename);
        return this.readFileMeta(filename, (function(_this) {
          return function(err, meta) {
            if (err) {
              return cb(err);
            }
            if (cached_file.meta.mtime === meta.mtime) {
              return cb(null, cached_file);
            } else {
              return _this._digest_calculator_.readFileDigest(filename, function(err, digest) {
                if (err) {
                  return cb(err);
                }
                if (cached_file.digest === digest) {
                  cached_file.meta = meta;
                  _this._file_cache_.set(filename, cached_file);
                  return cb(null, cached_file);
                } else {
                  return _this.readFile(filename, function(err, content) {
                    var new_file;
                    if (err) {
                      return cb(err);
                    }
                    new_file = {
                      meta: meta,
                      digest: digest,
                      content: content
                    };
                    _this._file_cache_.set(filename, new_file);
                    return cb(null, new_file);
                  });
                }
              });
            }
          };
        })(this));
      }
    });


    /*
    This internal method to load all file data
     */

    FileLoader.prototype._loadAllFileData = function(filename, step_cb) {
      return async.parallel({
        meta: (function(_this) {
          return function(parallel_cb) {
            return _this.readFileMeta(filename, parallel_cb);
          };
        })(this),
        digest: (function(_this) {
          return function(parallel_cb) {
            return _this._digest_calculator_.readFileDigest(filename, parallel_cb);
          };
        })(this),
        content: (function(_this) {
          return function(parallel_cb) {
            return _this.readFile(filename, parallel_cb);
          };
        })(this)
      }, step_cb);
    };


    /*
    This method just read a file, from disk
     */

    FileLoader.prototype.readFile = rejectOnInvalidFilenameType(function(filename, cb) {
      return fs.readFile(filename, 'utf8', function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb(null, data);
      });
    });


    /*
    This method read all file meta
     */

    FileLoader.prototype.readFileMeta = rejectOnInvalidFilenameType(function(filename, cb) {
      return fs.stat(filename, function(err, stats) {
        if (err) {
          return cb(err);
        }
        return cb(null, {
          mtime: +stats.mtime
        });
      });
    });

    return FileLoader;

  })();

  module.exports = FileLoader;

}).call(this);
