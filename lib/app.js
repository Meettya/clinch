// Generated by CoffeeScript 1.9.1

/*
This is main entry point for Clinch - API and setting here
 */

(function() {
  var Clinch, DIContainer, _,
    slice = [].slice;

  _ = require('lodash');

  DIContainer = require("./di_container");

  module.exports = Clinch = (function() {
    function Clinch(_options_) {
      this._options_ = _options_ != null ? _options_ : {};
      this._do_logging_ = !!this._options_.log;
      this._di_cont_obj_ = new DIContainer();
      this._configureComponents();
    }


    /*
    This method create browser package with given configuration
    actually its just proxy all to packer
     */

    Clinch.prototype.buildPackage = function() {
      var i, in_settings, main_cb, packer;
      in_settings = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), main_cb = arguments[i++];
      packer = this._di_cont_obj_.getComponent('Packer');
      return packer.buildPackage(this._composePackageSettings(in_settings), main_cb);
    };


    /*
    Silly mistype, will be deprecated soon
     */

    Clinch.prototype.buldPackage = function() {
      console.info("Depricated! use 'clinch.buildPackage' instead (sorry for mistype)");
      return this.buildPackage.apply(this, arguments);
    };


    /*
    This method force flush all caches
    yes, we are have three different caches
     */

    Clinch.prototype.flushCache = function() {
      var component_name, i, len, ref;
      ref = ['FileLoader', 'FileProcessor', 'Gatherer'];
      for (i = 0, len = ref.length; i < len; i++) {
        component_name = ref[i];
        this._di_cont_obj_.getComponent(component_name).resetCaches();
        null;
      }
      return null;
    };


    /*
    This method may return list of all files, used in package
    may be used for `watch` functionality on those files
     */

    Clinch.prototype.getPackageFilesList = function(package_config, main_cb) {
      var bundler;
      bundler = this._di_cont_obj_.getComponent('BundleProcessor');
      return bundler.buildRawPackageData(package_config, function(err, raw_data) {
        if (err) {
          return main_cb(err);
        }
        return main_cb(null, _.keys(bundler.joinBundleSets(raw_data).names_map));
      });
    };


    /*
    This method add separate clinch plugin, just shortcut
     */

    Clinch.prototype.addPlugin = function(arg) {
      var extension, processor;
      extension = arg.extension, processor = arg.processor;
      return this.registerProcessor(extension, processor);
    };


    /*
    This method add third party file processor to Clinch
     */

    Clinch.prototype.registerProcessor = function(file_extention, processor_fn) {
      var processor_obj;
      if (!_.isString(file_extention)) {
        throw TypeError("file extension must be a String but get |" + file_extention + "|");
      }
      if (!_.isFunction(processor_fn)) {
        throw TypeError("processor must be a Function but get |" + processor_fn + "|");
      }
      processor_obj = {};
      processor_obj[file_extention] = processor_fn;
      this._di_cont_obj_.addComponentsSettings('FileProcessor', 'third_party_compilers', processor_obj);
      return this;
    };


    /*
    This internal method used to configure components in DiC
     */

    Clinch.prototype._configureComponents = function() {

      /*
      set packer settings, default setting are
      
      strict        : on
      inject        : on
      runtime       : off
      cache_modules : on
       */
      var i, len, packer_settings, ref, setting_name;
      packer_settings = {
        log: !!this._options_.log
      };
      ref = ['strict', 'inject', 'runtime', 'cache_modules'];
      for (i = 0, len = ref.length; i < len; i++) {
        setting_name = ref[i];
        if (this._options_[setting_name] != null) {
          packer_settings[setting_name] = this._options_[setting_name];
        }
      }
      this._di_cont_obj_.setComponentsSettings({
        Packer: packer_settings
      });
      return null;
    };


    /*
    This internal method to compose bundle settings from package_name, package_config
    backward compatibility and new feature in one place
     */

    Clinch.prototype._composePackageSettings = function(in_settings) {
      var package_config, package_name;
      in_settings.reverse();
      package_config = in_settings[0], package_name = in_settings[1];
      if ((package_name != null) && (package_config.package_name == null)) {
        console.info('Depricated! Use "package_name" in package_config instead!');
        package_config.package_name = package_name;
      }
      return package_config;
    };

    return Clinch;

  })();

}).call(this);
