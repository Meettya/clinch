// Generated by CoffeeScript 1.9.3

/*
This class process raw data parts from Gatherer:
 - replace modules with replacers
 - clean up dependencies tree
 - re-build structure for packer

Короче, это пре-процессор для пакера, много лишних телодвижений нужно сделать с кодом
и это превращается в кашу, так что тут мы все подготавливаем 
и красиво уложеным отдаем пакеру на финальную упаковку и завязывание бантиков
 */

(function() {
  var BundleProcessor, _, async;

  _ = require('lodash');

  async = require('async');

  module.exports = BundleProcessor = (function() {
    function BundleProcessor(_gatherer_, _options_) {
      this._gatherer_ = _gatherer_;
      this._options_ = _options_ != null ? _options_ : {};
      this._do_logging_ = ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) && this._options_.log === true;
    }


    /*
    This META-method bulid package and process it in one touch
     */

    BundleProcessor.prototype.buildAll = function(package_config, method_cb) {
      return this.buildRawPackageData(package_config, (function(_this) {
        return function(err, code) {
          var res, res2, res3;
          if (err) {
            return method_cb(err);
          }
          res = _this.replaceDependenciesInRawPackageData(code);
          res2 = _this.joinBundleSets(res);
          res3 = _this.changePathsToHashesInJoinedSet(res2);
          return method_cb(null, res3);
        };
      })(this));
    };


    /*
    BENCHMARK IMPROVE!!!
    On simply test data I got about 97% of time in this method and 3% at all other
    So, to speed up all process we are need to cache THIS part - buildRawPackageData
     */


    /*
    This method will build raw package data
     */

    BundleProcessor.prototype.buildRawPackageData = function(package_config, method_cb) {
      var file_based_replacement, function_based_replacement, function_gatherer, liberal_gatherer, ref, ref1, strict_gatherer;
      ref = this._buildGatherers(package_config), liberal_gatherer = ref.liberal_gatherer, strict_gatherer = ref.strict_gatherer, function_gatherer = ref.function_gatherer;
      ref1 = this._bundleSeparator(package_config.replacement), file_based_replacement = ref1[0], function_based_replacement = ref1[1];
      return async.parallel({
        bundle: (function(_this) {
          return function(par_cb) {
            return _this._compileBundleSet(strict_gatherer, package_config.bundle, par_cb);
          };
        })(this),
        environment: (function(_this) {
          return function(par_cb) {
            return _this._compileBundleSet(strict_gatherer, package_config.environment, par_cb);
          };
        })(this),
        file_replacement: (function(_this) {
          return function(par_cb) {
            return _this._compileBundleSet(liberal_gatherer, file_based_replacement, par_cb);
          };
        })(this),
        function_replacement: (function(_this) {
          return function(par_cb) {
            return _this._compileBundleSet(function_gatherer, function_based_replacement, par_cb);
          };
        })(this)
      }, function(err, data) {
        if (err) {
          return method_cb(err);
        }
        return method_cb(null, data);
      });
    };


    /*
    This method separate bundle to two part - file based and function based
     */

    BundleProcessor.prototype._bundleSeparator = function(bundle_obj) {
      var file_based_bundle, function_based_bundle, name, ref, value;
      ref = [{}, {}], file_based_bundle = ref[0], function_based_bundle = ref[1];
      for (name in bundle_obj) {
        value = bundle_obj[name];
        if (_.isString(value)) {
          file_based_bundle[name] = value;
        } else if (_.isFunction(value)) {
          function_based_bundle[name] = value;
        } else {
          method_cb((function() {
            throw Error("unknown type of dependencies (not String or Function)\n|" + name + "| = |" + value + "|");
          })());
        }
      }
      return [file_based_bundle, function_based_bundle];
    };


    /*
    This method replace filtered dependencies in raw data to 'replacement' content 
    Yes, sync - nothing async here
     */

    BundleProcessor.prototype.replaceDependenciesInRawPackageData = function(package_data) {
      var i, item, len, ref, replace_processor, replacement, replacement_dict;
      replacement = [].concat(package_data.file_replacement, package_data.function_replacement);
      if (!replacement.length) {
        return package_data;
      }
      replacement_dict = _.reduce(replacement, function(memo, val) {
        memo[val.package_name] = _.values(val.dependencies_tree['.'])[0];
        return memo;
      }, {});
      replace_processor = function(bundle_pack) {
        return _.each(bundle_pack, function(bundle_item) {
          return _.each(_.values(bundle_item.dependencies_tree), function(out_val) {
            var dep_key, results;
            results = [];
            for (dep_key in out_val) {
              if (!(replacement_dict[dep_key] != null)) {
                continue;
              }
              out_val[dep_key] = replacement_dict[dep_key];
              results.push(null);
            }
            return results;
          });
        });
      };
      ref = [package_data.bundle, package_data.environment];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        replace_processor(item);
      }
      return package_data;
    };


    /*
    This method join bundle sets to flat structure
     */

    BundleProcessor.prototype.joinBundleSets = function(package_data) {
      var reduce_fn, result_obj, step, step_data;
      result_obj = {
        source_code: {},
        dependencies_tree: {},
        names_map: {},
        members: {}
      };
      reduce_fn = function(memo, val) {
        var i, key, len, ref;
        memo.members[val.package_name] = _.values(val.dependencies_tree['.'])[0];
        ref = ['source_code', 'dependencies_tree', 'names_map'];
        for (i = 0, len = ref.length; i < len; i++) {
          key = ref[i];
          memo[key] = _.extend(memo[key], val[key]);
        }
        return memo;
      };
      for (step in package_data) {
        step_data = package_data[step];
        result_obj[step + "_list"] = _.map(step_data, function(val) {
          return val.package_name;
        });
        _.reduce(step_data, reduce_fn, result_obj);
      }
      delete result_obj.dependencies_tree['.'];
      return result_obj;
    };


    /*
    This method will change all filepaths to it hashes.
    Its for squize names AND may reduce some items in sources,
    in case one code placed in diffenrent places - it may happened 
    for modules in node_modules folders - they have theyown dependencies
     */

    BundleProcessor.prototype.changePathsToHashesInJoinedSet = function(package_data) {
      var inner_key, inner_value, key, names_to_hash, out_key, out_value, pdm, pdt, psc, ref, ref1, ref2, tdt, tmp_dependencies_tree, tmp_source_code, value;
      names_to_hash = package_data.names_map;
      ref = (pdm = package_data.members);
      for (key in ref) {
        value = ref[key];
        pdm[key] = names_to_hash[value];
      }
      tmp_source_code = {};
      ref1 = (psc = package_data.source_code);
      for (key in ref1) {
        value = ref1[key];
        tmp_source_code[names_to_hash[key]] = value;
      }
      package_data.source_code = tmp_source_code;
      tmp_dependencies_tree = {};
      ref2 = (pdt = package_data.dependencies_tree);
      for (out_key in ref2) {
        out_value = ref2[out_key];
        tdt = tmp_dependencies_tree[names_to_hash[out_key]] = {};
        for (inner_key in out_value) {
          inner_value = out_value[inner_key];
          tdt[inner_key] = names_to_hash[inner_value];
        }
      }
      package_data.dependencies_tree = tmp_dependencies_tree;
      return package_data;
    };


    /*
    This method compile raw 'bundle' set with source, dep_trees and names
     */

    BundleProcessor.prototype._compileBundleSet = function(gatherer, bundle_obj, method_cb) {
      var map_fn;
      map_fn = function(arg, map_cb) {
        var part_name, part_path;
        part_name = arg[0], part_path = arg[1];
        return gatherer(part_path, function(err, package_data) {
          if (err) {
            return map_cb(err);
          }
          package_data.package_name = part_name;
          return map_cb(null, package_data);
        });
      };
      return async.map(_.pairs(bundle_obj), map_fn, function(err, res) {
        if (err) {
          return method_cb(err);
        }
        return method_cb(null, res);
      });
    };


    /*
    This method build two pre-fired Gatherers:
      strict (for bundle and environment) and liberal (for replacement)
    Just shorten call + now we are may have ONE gather for all
     */

    BundleProcessor.prototype._buildGatherers = function(package_config) {
      var liberal_filter, ref, ref1, requireless_filter, strict_filter;
      requireless_filter = (ref = package_config.requireless) != null ? ref : [];
      liberal_filter = (ref1 = package_config.exclude) != null ? ref1 : [];
      strict_filter = liberal_filter.concat(_.keys(package_config.replacement));
      return {
        liberal_gatherer: (function(_this) {
          return function(name, cb) {
            return _this._gatherer_.buildModulePack(name, {
              filters: liberal_filter,
              requireless: requireless_filter
            }, cb);
          };
        })(this),
        strict_gatherer: (function(_this) {
          return function(name, cb) {
            return _this._gatherer_.buildModulePack(name, {
              filters: strict_filter,
              requireless: requireless_filter
            }, cb);
          };
        })(this),
        function_gatherer: (function(_this) {
          return function(name, cb) {
            return _this._gatherer_.buildFunctionPack(name, cb);
          };
        })(this)
      };
    };

    return BundleProcessor;

  })();

}).call(this);
