// Generated by CoffeeScript 1.9.3

/*
This class compile and load files
 */

(function() {
  var FileProcessor, LRU, _, path, queueSomeRequest, rejectOnInvalidFilenameType;

  path = require('path');

  _ = require('lodash');

  LRU = require('lru-cache');

  rejectOnInvalidFilenameType = require('./checkers').rejectOnInvalidFilenameType;

  queueSomeRequest = require('./queuficator').queueSomeRequest;

  module.exports = FileProcessor = (function() {
    var MAX_AGE;

    MAX_AGE = 1000 * 60 * 60 * 10;

    function FileProcessor(_file_loader_, _options_) {
      this._file_loader_ = _file_loader_;
      this._options_ = _options_ != null ? _options_ : {};
      this._compiled_cache_ = LRU({
        max: 1000,
        maxAge: MAX_AGE
      });
      this._compilers_ = this._getAsyncCompilers();
      _.assign(this._compilers_, this._options_.third_party_compilers);
    }


    /*
    This method load one file and, if it needed, compile it
     */

    FileProcessor.prototype.loadFile = rejectOnInvalidFilenameType(queueSomeRequest(function(filename, cb) {
      var file_ext;
      file_ext = path.extname(filename);
      if (this._compilers_[file_ext] != null) {
        return this._file_loader_.getFileWithMeta(filename, (function(_this) {
          return function(err, data) {
            var content, digest, res;
            if (err) {
              return cb(err);
            }
            digest = data.digest;
            if (!_this._compiled_cache_.has(digest)) {
              content = data.content;
              return _this._compilers_[file_ext](_this._stripBOM(content), filename, function(err, result, must_be_parsed) {
                var res;
                if (err) {
                  return cb(err);
                }
                res = ("\n// " + filename + " \n") + result;
                _this._compiled_cache_.set(digest, {
                  must_be_parsed: must_be_parsed,
                  compiled_data: res
                });
                return cb(null, res, must_be_parsed, {
                  digest: digest
                });
              });
            } else {
              res = _this._compiled_cache_.get(digest);
              return cb(null, res.compiled_data, res.must_be_parsed, {
                digest: digest
              });
            }
          };
        })(this));
      } else {
        return cb(null, false);
      }
    }));


    /*
    This method return supported extentions
     */

    FileProcessor.prototype.getSupportedFileExtentions = function() {
      return _.keys(this._compilers_);
    };


    /*
    This method reset all caches
     */

    FileProcessor.prototype.resetCaches = function() {
      this._compiled_cache_.reset();
      return null;
    };


    /*
    This method from node.js lib/module
    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
    // because the buffer-to-string conversion in `fs.readFileSync()`
    // translates it to FEFF, the UTF-16 BOM.
     */

    FileProcessor.prototype._stripBOM = function(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        return content.slice(1);
      } else {
        return content;
      }
    };


    /*
    This is Async compilers list.
    @return - error, data, isRealCode (ie. may have 'require' and should to be processed)
     */

    FileProcessor.prototype._getAsyncCompilers = function() {
      return {
        '.js': function(data, filename, cb) {
          return cb(null, data, true);
        },
        '.json': function(data, filename, cb) {
          return cb(null, "module.exports = " + data);
        }
      };
    };

    return FileProcessor;

  })();

}).call(this);
