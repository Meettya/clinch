// Generated by CoffeeScript 1.7.1

/*
This method will calculate digests
 */

(function() {
  var DigestCalculator, crypto, fs, queueSomeRequest, rejectOnInvalidFilenameType, shorthash, _;

  _ = require('lodash');

  fs = require('fs');

  crypto = require('crypto');

  shorthash = require('shorthash');

  rejectOnInvalidFilenameType = require('./checkers').rejectOnInvalidFilenameType;

  queueSomeRequest = require('./queuficator').queueSomeRequest;

  module.exports = DigestCalculator = (function() {
    var DIGEST_TYPE, HASH_TYPE;

    HASH_TYPE = 'md5';

    DIGEST_TYPE = 'hex';

    function DigestCalculator(_options_) {
      this._options_ = _options_ != null ? _options_ : {};
    }


    /*
    This method generate digest for file content
     */

    DigestCalculator.prototype.readFileDigest = rejectOnInvalidFilenameType(queueSomeRequest(function(filename, cb) {
      var hasher, stream;
      hasher = crypto.createHash(HASH_TYPE);
      stream = fs.createReadStream(filename);
      stream.on('data', function(data) {
        return hasher.update(data);
      });
      stream.on('error', function(err) {
        return cb(err);
      });
      return stream.on('end', function() {
        return cb(null, shorthash.unique(hasher.digest(DIGEST_TYPE)));
      });
    }));


    /*
    This method generate digest for any data
     */

    DigestCalculator.prototype.calculateDataDigest = function(in_data) {
      var hasher;
      hasher = crypto.createHash(HASH_TYPE);
      if (!_.isString(in_data)) {
        in_data = in_data != null ? in_data.toString() : void 0;
      }
      hasher.update(in_data, 'utf8');
      return shorthash.unique(hasher.digest(DIGEST_TYPE));
    };

    return DigestCalculator;

  })();

}).call(this);
